Parameters:
  VpcId:
    Type: 'AWS::EC2::VPC::Id'
    Description: Select your Default Virtual Private Cloud (VPC)
    ConstraintDescription: You need to select the VPC from drop-down menu
  Subnets:
    Type: 'List<AWS::EC2::Subnet::Id>'
    Description: Select atleast two Subnets which you want to be included in your AutoScalling Group
    ConstraintDescription: These subnets should be within the selected VPC.
  KeyName:
    Description: Select the Keypair that you would like to use to login to EC2 instances.
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: KeyPair to login to EC2.
  DBName:
    Type: String
    Default: RezDatabase
    Description: MySQL database name
    MinLength: '1'
    MaxLength: '64'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: Starts with a letter. Only alphanumeric characters allowed.
  DBUser:
    Type: String
    Description: Please enter username for MySQL database.
    MinLength: '1'
    MaxLength: '16'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: Starts with a letter. Only alphanumeric characters allowed.
  DBPassword:
    Type: String
    NoEcho: 'true'
    Description: Please enter password for MySQL database. Only alphanumeric characters allowed.
    MinLength: '8'
    MaxLength: '16'
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: Only alphanumeric characters allowed.
  DBAllocatedStorage:
    Type: Number
    Default: '20'
    Description: Database size in Gb
    MinValue: '20'
    MaxValue: '1024'
    ConstraintDescription: Your DB size has to be between 20GB to 16384GB
  DBInstanceClass:
    Type: String
    Description: The database instance type
    Default: db.t2.small
    AllowedValues:
      - db.t1.micro
      - db.m1.small
      - db.m1.medium
      - db.m1.large
      - db.m1.xlarge
      - db.m2.xlarge
      - db.m2.2xlarge
      - db.m2.4xlarge
      - db.m3.medium
      - db.m3.large
      - db.m3.xlarge
      - db.m3.2xlarge
      - db.m4.large
      - db.m4.xlarge
      - db.m4.2xlarge
      - db.m4.4xlarge
      - db.m4.10xlarge
      - db.r3.large
      - db.r3.xlarge
      - db.r3.2xlarge
      - db.r3.4xlarge
      - db.r3.8xlarge
      - db.m2.xlarge
      - db.m2.2xlarge
      - db.m2.4xlarge
      - db.cr1.8xlarge
      - db.t2.micro
      - db.t2.small
      - db.t2.medium
      - db.t2.large
    ConstraintDescription: Select the instance flavor size.
  MultiAZDatabase:
    Type: String
    Default: 'True'
    Description: Do you want Multi-AZ DB deployment?
    AllowedValues:
      - 'True'
      - 'False'
  WebServerCapacity:
    Type: Number
    Default: '2'
    Description: How many EC2 instanses to be deployed initially?
    MinValue: '1'
    MaxValue: '8'
    ConstraintDescription: Select between 1 and 8 instances to be deployed initially in the AutoScalling Group.
  PolicyTargetValue:
    Type: String
    Default: '70'
    Description: Allowed CPU Utilization before Scalling up
  InstanceType:
    Type: String
    Description: Select EC2 flavor size
    Default: t2.micro
    AllowedValues:
      - t1.micro
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - m1.small
      - m1.medium
      - m1.large
      - m1.xlarge
      - m2.xlarge
      - m2.2xlarge
      - m2.4xlarge
      - m3.medium
      - m3.large
      - m3.xlarge
      - m3.2xlarge
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
      - c1.medium
      - c1.xlarge
      - c3.large
      - c3.xlarge
      - c3.2xlarge
      - c3.4xlarge
      - c3.8xlarge
      - c4.large
      - c4.xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
      - g2.2xlarge
      - g2.8xlarge
      - r3.large
      - r3.xlarge
      - r3.2xlarge
      - r3.4xlarge
      - r3.8xlarge
      - i2.xlarge
      - i2.2xlarge
      - i2.4xlarge
      - i2.8xlarge
      - d2.xlarge
      - d2.2xlarge
      - d2.4xlarge
      - d2.8xlarge
      - hi1.4xlarge
      - hs1.8xlarge
      - cr1.8xlarge
      - cc2.8xlarge
      - cg1.4xlarge
  SSHLocation:
    Type: String
    Description: What IPv4 address range would you use to SSH to the Servers?
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: Has to be valid IPv4 address in the format of x.x.x.x/x.
Mappings:
  AWSInstanceType2Arch:
    t1.micro:
      Arch: PV64
    t2.nano:
      Arch: HVM64
    t2.micro:
      Arch: HVM64
    t2.small:
      Arch: HVM64
    t2.medium:
      Arch: HVM64
    t2.large:
      Arch: HVM64
    m1.small:
      Arch: PV64
    m1.medium:
      Arch: PV64
    m1.large:
      Arch: PV64
    m1.xlarge:
      Arch: PV64
    m2.xlarge:
      Arch: PV64
    m2.2xlarge:
      Arch: PV64
    m2.4xlarge:
      Arch: PV64
    m3.medium:
      Arch: HVM64
    m3.large:
      Arch: HVM64
    m3.xlarge:
      Arch: HVM64
    m3.2xlarge:
      Arch: HVM64
    m4.large:
      Arch: HVM64
    m4.xlarge:
      Arch: HVM64
    m4.2xlarge:
      Arch: HVM64
    m4.4xlarge:
      Arch: HVM64
    m4.10xlarge:
      Arch: HVM64
    c1.medium:
      Arch: PV64
    c1.xlarge:
      Arch: PV64
    c3.large:
      Arch: HVM64
    c3.xlarge:
      Arch: HVM64
    c3.2xlarge:
      Arch: HVM64
    c3.4xlarge:
      Arch: HVM64
    c3.8xlarge:
      Arch: HVM64
    c4.large:
      Arch: HVM64
    c4.xlarge:
      Arch: HVM64
    c4.2xlarge:
      Arch: HVM64
    c4.4xlarge:
      Arch: HVM64
    c4.8xlarge:
      Arch: HVM64
    g2.2xlarge:
      Arch: HVMG2
    g2.8xlarge:
      Arch: HVMG2
    r3.large:
      Arch: HVM64
    r3.xlarge:
      Arch: HVM64
    r3.2xlarge:
      Arch: HVM64
    r3.4xlarge:
      Arch: HVM64
    r3.8xlarge:
      Arch: HVM64
    i2.xlarge:
      Arch: HVM64
    i2.2xlarge:
      Arch: HVM64
    i2.4xlarge:
      Arch: HVM64
    i2.8xlarge:
      Arch: HVM64
    d2.xlarge:
      Arch: HVM64
    d2.2xlarge:
      Arch: HVM64
    d2.4xlarge:
      Arch: HVM64
    d2.8xlarge:
      Arch: HVM64
    hi1.4xlarge:
      Arch: HVM64
    hs1.8xlarge:
      Arch: HVM64
    cr1.8xlarge:
      Arch: HVM64
    cc2.8xlarge:
      Arch: HVM64
  AWSRegionArch2AMI:
    us-east-1:
      PV64: ami-2a69aa47
      HVM64: ami-97785bed
      HVMG2: ami-0a6e3770
    us-west-2:
      PV64: ami-7f77b31f
      HVM64: ami-f2d3638a
      HVMG2: ami-ee15a196
    us-west-1:
      PV64: ami-a2490dc2
      HVM64: ami-824c4ee2
      HVMG2: ami-0da4a46d
    eu-west-1:
      PV64: ami-4cdd453f
      HVM64: ami-d834aba1
      HVMG2: ami-af8013d6
    eu-west-2:
      PV64: NOT_SUPPORTED
      HVM64: ami-403e2524
      HVMG2: NOT_SUPPORTED
    eu-west-3:
      PV64: NOT_SUPPORTED
      HVM64: ami-8ee056f3
      HVMG2: NOT_SUPPORTED
    eu-central-1:
      PV64: ami-6527cf0a
      HVM64: ami-5652ce39
      HVMG2: ami-1d58ca72
    ap-northeast-1:
      PV64: ami-3e42b65f
      HVM64: ami-ceafcba8
      HVMG2: ami-edfd658b
    ap-northeast-2:
      PV64: NOT_SUPPORTED
      HVM64: ami-863090e8
      HVMG2: NOT_SUPPORTED
    ap-northeast-3:
      PV64: NOT_SUPPORTED
      HVM64: ami-83444afe
      HVMG2: NOT_SUPPORTED
    ap-southeast-1:
      PV64: ami-df9e4cbc
      HVM64: ami-68097514
      HVMG2: ami-c06013bc
    ap-southeast-2:
      PV64: ami-63351d00
      HVM64: ami-942dd1f6
      HVMG2: ami-85ef12e7
    ap-south-1:
      PV64: NOT_SUPPORTED
      HVM64: ami-531a4c3c
      HVMG2: ami-411e492e
    us-east-2:
      PV64: NOT_SUPPORTED
      HVM64: ami-f63b1193
      HVMG2: NOT_SUPPORTED
    ca-central-1:
      PV64: NOT_SUPPORTED
      HVM64: ami-a954d1cd
      HVMG2: NOT_SUPPORTED
    sa-east-1:
      PV64: ami-1ad34676
      HVM64: ami-84175ae8
      HVMG2: NOT_SUPPORTED
    cn-north-1:
      PV64: ami-77559f1a
      HVM64: ami-cb19c4a6
      HVMG2: NOT_SUPPORTED
    cn-northwest-1:
      PV64: ami-80707be2
      HVM64: ami-3e60745c
      HVMG2: NOT_SUPPORTED
Resources:
  LBListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref LBTargetGr
      LoadBalancerArn: !Ref LoadBalancer
      Protocol: HTTP
      Port: '80'
  LoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Subnets: !Ref Subnets
  LBTargetGr:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      VpcId: !Ref VpcId
      HealthCheckIntervalSeconds: 6
      HealthCheckTimeoutSeconds: 3
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 3
      TargetGroupAttributes:
        - Key: stickiness.enabled
          Value: 'true'
        - Key: stickiness.type
          Value: lb_cookie
        - Key: stickiness.lb_cookie.duration_seconds
          Value: '30'
  POL:
    Type: 'AWS::AutoScaling::ScalingPolicy'
    Properties:
      AutoScalingGroupName: !Ref ServerGr
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: !Ref PolicyTargetValue
  ServerGr:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      VPCZoneIdentifier: !Ref Subnets
      LaunchConfigurationName: !Ref LaunchConfig
      MinSize: '2'
      MaxSize: '4'
      DesiredCapacity: !Ref WebServerCapacity
      TargetGroupARNs:
        - !Ref LBTargetGr
    #CreationPolicy:
      #ResourceSignal:
        #Timeout: PT15M
        #Count: !Ref WebServerCapacity
    #UpdatePolicy:
      #AutoScalingRollingUpdate:
        #MinInstancesInService: '1'
        #MaxBatchSize: '1'
        #PauseTime: PT15M
        #WaitOnResourceSignals: 'false'
  LaunchConfig:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Properties:
      ImageId: !FindInMap 
        - AWSRegionArch2AMI
        - !Ref 'AWS::Region'
        - !FindInMap 
          - AWSInstanceType2Arch
          - !Ref InstanceType
          - Arch
      InstanceType: !Ref InstanceType
      SecurityGroups:
        - !Ref ServerSecurityGr
      KeyName: !Ref KeyName
      UserData: !Base64 
        'Fn::Join':
          - ''
          - - |
              #!/bin/bash -xe
            - |
              yum install -y httpd php git php-mysql
            - |
              yum update -y
            - |
              chkconfig httpd on
            - |
              service httpd start
            - |
              cd /var/www/html
            - |
              git clone https://github.com/rezwaniq/trinimbus.git
            - |
              cp trinimbus/* /var/www/html/
            - |
              touch config.json
            - |
              echo "
            - |
              <html>
                  - |2
                      <head>
                  - |2
                        <title>Page to test connection to MySQL DB</title>
                  - |2
                      </head>
                  - |2
                      <body>
                  - |2
                        <h1>Your sample page to test MySQL DB</h1>
                  - |2
                        <p/>
                  - '      $Database   = "'
                  - !GetAtt 
                    - MySQLDatabase
                    - Endpoint.Address
                  - |
                    ";
                  - '      $DBUser     = "'
                  - !Ref DBUser
                  - |
                    ";
                  - '      $DBPassword = "'
                  - !Ref DBPassword
                  - |
                    ";
                  - |2
                          print "Database = " . $Database . "<br />";
                  - |2
                          $dbconnection = mysql_connect($Database, $DBUser, $DBPassword)
                  - |2
                                          or die("Could not connect: " . mysql_error());
                  - |2
                          print ("Connected to $Database successfully");
                  - |2
                          mysql_close($dbconnection);
                  - |2
                        ?>
                  - |2
                         </body>
                  - |
                    </html>
            - |+

  ServerSecurityGr:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: SSH and HTTP enabled in EC2
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          SourceSecurityGroupId: !Select 
            - 0
            - !GetAtt 
              - LoadBalancer
              - SecurityGroups
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Ref SSHLocation
      VpcId: !Ref VpcId
  DatabaseServerSecGr:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 3306 port opening in MySQL DB
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '3306'
          ToPort: '3306'
          SourceSecurityGroupId: !Ref ServerSecurityGr
      VpcId: !Ref VpcId
  MySQLDatabase:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      Engine: MySQL
      DBName: !Ref DBName
      MultiAZ: !Ref MultiAZDatabase
      MasterUsername: !Ref DBUser
      MasterUserPassword: !Ref DBPassword
      DBInstanceClass: !Ref DBInstanceClass
      AllocatedStorage: !Ref DBAllocatedStorage
      VPCSecurityGroups:
        - !GetAtt 
          - DatabaseServerSecGr
          - GroupId
Outputs:
  WebsiteURL:
    Description: You Stack URL is.
    Value: !Join 
      - ''
      - - 'http://'
        - !GetAtt 
          - LoadBalancer
          - DNSName